# -*- coding: utf-8 -*-
"""Week 3 Decision Tree.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/10ddUISUg9axNHKiJ8Oq7y-IUcMrJOXLY

# **Python Decision Tree Classifier Example**

**Make Golf Predictions Using A Decision Tree**

**Decision Trees** are a type of **Supervised Learning Algorithms**(meaning that they were given labeled data to train on). The training data is continuously split into two more sub-nodes according to a certain parameter. The tree can be explained by two things, **leaves and decision nodes**. The decision nodes are where the data is split. The leaves are the decisions or the final outcomes. You can think of a decision tree in **programming terms** as a tree that has a **bunch of “if statements”** for each node until you get to a leaf node (the final outcome).
"""

## import dependencies
#For our Decision Tree
from sklearn import tree

# For our DataFrame
import pandas as pd 

# To create our Decision Tree Graph
import pydotplus

# To Display a image of our graph
from IPython.display import Image

"""Create the data set that will be used for this example on Decision Trees, by first creating an empty pandas data frame, and inputting data into every column/feature/attribute (Outlook, Temperature, Humidity, Windy, Play).

### **Data Description:**

**Outlook = The outlook of the weather**

**Temperature = The temperature of the weather**

**Humidity = The humidity of the weather**

**Windy = A variable if it is windy that day or not**

**Play = The target variable, tells if the golfer played golf that day or not**

*Outlook values: sunny, overcast, rainy*

*Temperature values: hot, mild, cold*

*Humidity values: high, normal*

*Windy values: true, false*

*Play values: yes, no*
"""

#Create the dataset
#create empty data frame
golf_df = pd.DataFrame()

#add outlook
golf_df['Outlook'] = ['sunny', 'sunny', 'overcast', 'rainy', 'rainy', 'rainy', 
                     'overcast', 'sunny', 'sunny', 'rainy', 'sunny', 'overcast',
                     'overcast', 'rainy']

#add temperature
golf_df['Temperature'] = ['hot', 'hot', 'hot', 'mild', 'cool', 'cool', 'cool',
                         'mild', 'cool', 'mild', 'mild', 'mild', 'hot', 'mild']

#add humidity
golf_df['Humidity'] = ['high', 'high', 'high', 'high', 'normal', 'normal', 'normal',
                      'high', 'normal', 'normal', 'normal', 'high', 'normal', 'high']

#add windy
golf_df['Windy'] = ['false', 'true', 'false', 'false', 'false', 'true', 'true',
                   'false', 'false', 'false', 'true', 'true', 'false', 'true']

#finally add play
golf_df['Play'] = ['no', 'no', 'yes', 'yes', 'yes', 'no', 'yes', 'no', 'yes', 'yes', 'yes', 
                  'yes', 'yes', 'no']


#Print/show the new data
print(golf_df)

# Convert categorical variable into dummy/indicator variables or (binary vairbles) essentialy 1's and 0's
# Choose the variable name one_hot_data becaause in ML one-hot is a group of bits among which the legal combinations of values are only those with a single high (1) bit 
# and all the others low (0)
one_hot_data = pd.get_dummies(golf_df[ ['Outlook', 'Temperature', 'Humidity', 'Windy'] ])

#print the new dummy data
one_hot_data

# The decision tree classifier.
clf = tree.DecisionTreeClassifier()

# Training the Decision Tree
clf_train = clf.fit(one_hot_data, golf_df['Play'])

# Export/Print a decision tree in DOT format.
print(tree.export_graphviz(clf_train, None))

#Create Dot Data
dot_data = tree.export_graphviz(clf_train, out_file=None, feature_names=list(one_hot_data.columns.values), 
                                class_names=['Not_Play', 'Play'], rounded=True, filled=True) 
#Create Graph from DOT data
graph = pydotplus.graph_from_dot_data(dot_data)

# Show graph
Image(graph.create_png())

